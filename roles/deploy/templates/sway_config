# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key
set $mod Mod4

# Define variables corresponding to keyboard letters
# We use keyboard to have a configuration independent from the keyboard layout
# Use `xev` to get the keycode of a key
# TODO : maybe replace xev by a wayland-native equivalent ?
# All variable names correspond to the qwerty lafayette position

set $minus 20

set $q 24
set $w 25
set $e 26
set $r 27
set $t 28

set $u 30
set $i 31
set $o 32
set $p 33

set $a 38
set $s 39
set $d 40
set $f 41
set $g 42
set $left 43
set $down 44
set $up 45
set $right 46
# TODO : rename those when needed
# set $â˜… 47
# set $' 48

set $z 52
set $x 53
set $c 54
set $v 55
set $b 56

set $return 36
set $space 65
set $escape 9
set $ctrl CTRL

set $1 10
set $2 11
set $3 12
set $4 13
set $5 14
set $6 15
set $7 16
set $8 17
set $9 18
set $0 19

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
output * bg /usr/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill
#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * dpms off"' \
#               resume 'swaymsg "output * dpms on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

# TODO : setup better lockscreen
set $lock_command swaylock --color 555555

# manually lock screen
bindcode $mod+$z exec $lock_command


### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

input "type:keyboard" {
  xkb_layout  "fr"
  xkb_variant "lafayette"
}

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindcode $mod+$return exec alacritty

    # Kill focused window
    bindcode $mod+Shift+$q kill

    # Start your launcher
    # Note: pass the final command to swaymsg so that the resulting window can be opened
    # on the original workspace that the command was run on.
    # set $menu dmenu_path | dmenu | xargs swaymsg exec --
    set $rofi_common -theme /usr/share/rofi/themes/glue_pro_blue.rasi
    # Possible modi that might be interesting besides run and drun : ssh, window, combi
    bindcode $mod+$d exec --no-startup-id rofi $rofi_common -modi run  -show run
    bindcode $mod+$g exec --no-startup-id rofi $rofi_common -modi drun -show drun
    # Rofimoji is currently broken
    # TODO : fix and rebind somewhere else
    # bindcode $mod+$z exec --no-startup-id rofimoji --insert-with-clipboard --rofi-args="$rofi_common"


    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindcode $mod+Shift+$c reload

    # Exit sway (logs you out of your Wayland session)
    bindcode $mod+Shift+$e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindcode $mod+$left focus left
    bindcode $mod+$down focus down
    bindcode $mod+$up focus up
    bindcode $mod+$right focus right

    # Move the focused window with the same, but add Shift
    bindcode $mod+Shift+$left move left
    bindcode $mod+Shift+$down move down
    bindcode $mod+Shift+$up move up
    bindcode $mod+Shift+$right move right
#
# Workspaces:
#

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1  "1:web"
set $ws2  "2"
set $ws3  "3"
set $ws4  "4"
set $ws5  "5"
set $ws6  "6"
set $ws7  "7"
set $ws8  "8:music"
set $ws9  "9:chat"
set $ws10 "10:mail"

# switch to workspace
bindcode $mod+$1 workspace $ws1
bindcode $mod+$2 workspace $ws2
bindcode $mod+$3 workspace $ws3
bindcode $mod+$4 workspace $ws4
bindcode $mod+$5 workspace $ws5
bindcode $mod+$6 workspace $ws6
bindcode $mod+$7 workspace $ws7
bindcode $mod+$8 workspace $ws8
bindcode $mod+$9 workspace $ws9
bindcode $mod+$0 workspace $ws10

# move focused container to workspace
bindcode $mod+Shift+$1 move container to workspace $ws1
bindcode $mod+Shift+$2 move container to workspace $ws2
bindcode $mod+Shift+$3 move container to workspace $ws3
bindcode $mod+Shift+$4 move container to workspace $ws4
bindcode $mod+Shift+$5 move container to workspace $ws5
bindcode $mod+Shift+$6 move container to workspace $ws6
bindcode $mod+Shift+$7 move container to workspace $ws7
bindcode $mod+Shift+$8 move container to workspace $ws8
bindcode $mod+Shift+$9 move container to workspace $ws9
bindcode $mod+Shift+$0 move container to workspace $ws10

# Move workspace to another screen
bindcode $ctrl+$mod+$left move workspace to output left
bindcode $ctrl+$mod+$down move workspace to output up
bindcode $ctrl+$mod+$up move workspace to output down
bindcode $ctrl+$mod+$right move workspace to output right

#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindcode $mod+$b splith
    bindcode $mod+$v splitv

    # Switch the current container between different layout styles
    bindcode $mod+$s layout stacking
    bindcode $mod+$w layout tabbed
    bindcode $mod+$e layout toggle split

    # Make the current focus fullscreen
    bindcode $mod+$f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindcode $mod+Shift+$space floating toggle

    # Swap focus between the tiling area and the floating area
    bindcode $mod+$space focus mode_toggle

    # Move focus to the parent container
    bindcode $mod+$a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindcode $mod+Shift+$minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindcode $mod+$minus scratchpad show
#
# Resizing containers:
#
# resize window (you can also use the mouse for that)
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindcode $left resize shrink width 10px
    bindcode $down resize grow height 10px
    bindcode $up resize shrink height 10px
    bindcode $right resize grow width 10px

    # Return to default mode
    bindcode $return mode "default"
    bindcode $escape mode "default"
}
bindcode $mod+$r mode "resize"

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    # When the status_command prints a new line to stdout, swaybar updates.
    # The default just shows the current date and time.
    status_command while date +'%F %T'; do sleep 1; done

    # colors {
    #     statusline #ffffff
    #     background #323232
    #     inactive_workspace #32323200 #32323200 #5c5c5c
    # }
}






### old i3 config not migrated yet

# # Dependencies :
# # - feh
# # - xnumlockx
# # - scrot (for screenshots)
# 
# # Notes on usage :
# # For NetworkManager configuration, use :
# # - nmtui for most config
# # - "Network Connections" (launch from rofi) for WPA2 Enterprise
# 
# 
# # Add shortcuts to temporary change the layout
# set $mode_keyboard "keyboard layout selection"
# mode $mode_keyboard {
#     bindcode $down exec --no-startup-id "setxkbmap fr -variant lafayette && numlockx && notify-send -t 2000 'Layout switched to qwerty lafayette'"; mode "default"
#     bindcode $up exec --no-startup-id "setxkbmap fr -variant bepo      && numlockx && notify-send -t 2000 'Layout switched to bepo'";             mode "default"
#     bindcode $right exec --no-startup-id "setxkbmap fr                    && numlockx && notify-send -t 2000 'Layout switched to azerty'";           mode "default"
#     # back to normal: Enter or Escape
#     bindcode $return mode "default"
#     bindcode $escape mode "default"
# }
# bindcode $mod+$b mode $mode_keyboard
# 
# # Use Mouse+$mod to drag floating windows to their wanted position
# floating_modifier $mod
# 
# # Take a screenshot
# bindcode $mod+$p exec --no-startup-id .globalrc/files/scripts/i3-scrot
# 
# 
# # Based on https://faq.i3wm.org/question/239/how-do-i-suspendlockscreen-and-logout.1.html
# # The i3-exit script is installed at deploy-time
# # TODO: Better way to call i3-exit (templating ? Changing $_PATH ?)
# set $mode_system "system"
# mode $mode_system {
#     # Same position as default shortcut
#     bindcode $e exec --no-startup-id .globalrc/files/scripts/i3-exit logout,    mode "default"
#     # Right hand default position, with a gradation
#     bindcode $down exec --no-startup-id .globalrc/files/scripts/i3-exit lock,      mode "default"
#     bindcode $up exec --no-startup-id .globalrc/files/scripts/i3-exit suspend,   mode "default"
#     bindcode $right exec --no-startup-id .globalrc/files/scripts/i3-exit hibernate, mode "default"
#     bindcode $â˜… exec --no-startup-id .globalrc/files/scripts/i3-exit shutdown,  mode "default"
#     bindcode $' exec --no-startup-id .globalrc/files/scripts/i3-exit reboot,    mode "default"
# 
#     # back to normal: Enter or Escape
#     bindcode $return mode "default"
#     bindcode $escape mode "default"
# }
# bindcode $mod+$u mode $mode_system
# 
# set $mode_output "output"
# mode $mode_output {
#     # Use `arandr` to generate the configurations locally
#     # You can also manually craft the xrandr scripts if you wish
# 
#     # Dynamic dual-screen through rofi
#     bindcode $left exec --no-startup-id ROFI_ARGS="$rofi_common" .globalrc/files/scripts/i3-monitor-layout, mode "default"
#     # Reset everything. Useful if you have currently no displayâ€¦
#     bindcode $' exec --no-startup-id xrandr --auto, mode "default"
# 
#     # Laptop mode (only laptop screen)
#     bindcode $down exec --no-startup-id .screenlayout/laptop.sh,  mode "default"
# 
#     # Desktop modes (multiple screens, disable laptop screen or not, etc...)
#     bindcode $up exec --no-startup-id .screenlayout/desktop_1.sh, mode "default"
#     bindcode $right exec --no-startup-id .screenlayout/desktop_2.sh, mode "default"
#     bindcode $â˜… exec --no-startup-id .screenlayout/desktop_3.sh, mode "default"
# 
#     # back to normal: Enter or Escape
#     bindcode $return mode "default"
#     bindcode $escape mode "default"
# }
# bindcode $mod+$o mode $mode_output
# 
# set $mode_type "type"
# mode $mode_type {
#     # --release is required because otherwise the cursor is still grabbed by i3 and xdotool can't find your window
#     # type current date in iso 8601 format
#     bindcode --release $d exec --no-startup-id xdotool type "$(date --iso-8601)", mode "default"
# 
#     # back to normal: Enter or Escape
#     bindcode $return mode "default"
#     bindcode $escape mode "default"
# }
# bindcode $mod+$t mode $mode_type
# 
# # Start i3bar to display a workspace bar (plus the system information i3status
# # finds out, if available)
# bar {
#     status_command i3status
# }
# 
# # Assign windows to specific workspaces (use xprop to find classes)
# assign [class="Firefox"]      $ws1
# 
# # https://github.com/i3/i3/issues/2060
# # assign [class="spotify"] $ws8
# for_window [class="Spotify"] move to workspace $ws8
# 
# assign [class="discord"]      $ws9
# assign [class="quassel"]      $ws9
# assign [class="riot"]         $ws9
# assign [class="Slack"]        $ws9
# 
# assign [class="Thunderbird"]  $ws10
# 
# 
# # Assign workspaces to specific outputs (xrandr output names)
# 
# # This is for a layout with 2 horizontal screens.
# # It is absolutely not portable in the current state
# # maybe we can improve it by using marks
# 
# # mapping to the actual screen names
# set $outputoeft  "DP-2"
# set $output_right "HDMI-1"
# 
# # assigning each workspace to a screen
# workspace $ws1  output $output_left
# workspace $ws2  output $output_right
# workspace $ws3  output $output_right
# workspace $ws4  output $output_right
# workspace $ws5  output $output_right
# workspace $ws6  output $output_right
# workspace $ws7  output $output_right
# workspace $ws8  output $output_right
# workspace $ws9  output $output_right
# workspace $ws10 output $output_right
# 
# # Programs to run at startup
# 
# # Default screen layout, to configure locally (see xrandr mode above)
# # default.sh should be a symlink to one of the modes otherwise accessible
# exec --no-startup-id .screenlayout/default.sh
# 
# # Enable NumLock by default
# # https://github.com/chanfrv/dotfiles/blob/master/config/i3/config
# # https://wiki.archlinux.org/index.php/Activating_Numlock_on_Bootup
# exec --no-startup-id numlockx
# 
# # Start dunst (notification daemon)
# # NB : we could also configure dbus to autostart it in
# # /usr/share/dbus-1/services/org.freedesktop.Notifications.service
# # Not sure why it sometimes work out of the box, and sometimes not (systemd ?)
# # We currently use the default config
# exec --no-startup-id dunst
# 
# # Start redshift
# # This reduces the amount of blue light emitted by the screen based
# # on the time of the day
# # We currently use the default config
# exec --no-startup-id redshift
# 
# # Wallpaper image
# exec_always --no-startup-id feh --randomize --bg-fill Pictures/Wallpapers/*
